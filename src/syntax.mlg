DECLARE PLUGIN "synthesis-coq-plugin.plugin"

{

(* open Array *)
open Ltac_plugin
open Pp
open Stdarg
(* open Sys *)
(* open Unix *)

}


TACTIC EXTEND my_intro
| [ "my_intro" ident(i) ] ->
  { Tactics.introduction i }
END

VERNAC COMMAND EXTEND ExploreProof CLASSIFIED AS QUERY
| ![ proof_query ] [ "ExploreProof" ] ->
  { fun ~pstate ->
    let sigma, env = Declare.Proof.get_current_context pstate in
    let pprf = Proof.partial_proof (Declare.Proof.get pstate) in
    Feedback.msg_notice
      (Pp.prlist_with_sep Pp.fnl (Printer.pr_econstr_env env sigma) pprf)
  }
END

VERNAC COMMAND EXTEND NameProof CLASSIFIED AS QUERY
| ![proof_query] [ "NameProof" ] ->
  { fun ~pstate ->
    Feedback.msg_notice (str (Names.Id.to_string (Declare.Proof.get_name pstate)))}
END


VERNAC COMMAND EXTEND TryThis CLASSIFIED AS QUERY
| ![proof_query] [ "TryThis" ] ->
  {
    fun ~pstate ->
      let proof_data = Proof.data (Declare.Proof.get pstate) in
      Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl Evar.print proof_data.goals)
  }
END

VERNAC COMMAND EXTEND RunProverbot CLASSIFIED AS QUERY
| ![proof_query] [ "RunProverbot" ] ->
  {
    fun ~pstate ->
      let proof_name = Names.Id.to_string (Declare.Proof.get_name pstate) in
        let proverbot_dir = "/home/arpan/Downloads/holder/proverbot9001/" in
        let cmd_length = Array.length (Sys.argv) in
        let filename = Unix.realpath (Sys.argv.(cmd_length - 1)) in
        let ic = Arg.read_arg filename in
        let ic_mod = Array.of_list (List.tl (Array.to_list ic)) in
        let _ = Arg.write_arg "trial.v" ic_mod in
        let cmd_to_run = proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat " ^ "~/Downloads/coq-synthesis/_build/default/trial.v" ^ " --proof=" ^ proof_name ^ " --no-generate-report" in
        let _ = Unix.system (cmd_to_run) in
        let strsearch = Str.regexp "status" in
        let ic' = Core.In_channel.read_all "/home/arpan/Downloads/coq-synthesis/_build/default/search-report/trial-proofs.txt" in
        let filelen = String.length ic' in
        let index = (Str.search_forward strsearch ic' 0) - 2 in
        let relstring = String.sub ic' index (filelen - index - 2) in
        let json = Yojson.Safe.from_string relstring in
        let open Yojson.Safe.Util in
        let commands = json |> member "commands" |> to_list in
        let tactics = List.map(fun command -> member "tactic" command |> to_string) commands in
        let _ = Feedback.msg_notice (Pp.fnl ()) in
        let _ = Feedback.msg_notice (str "Here's the synthesized proof: ") in
        let _ = Feedback.msg_notice (Pp.fnl ()) in
        Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl str tactics)
  }
END
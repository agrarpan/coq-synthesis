DECLARE PLUGIN "synthesis-coq-plugin.plugin"

{

open Ltac_plugin
open Pp
open Stdarg

}


VERNAC COMMAND EXTEND PrintGoals CLASSIFIED AS QUERY
| ![proof_query] [ "PrintGoals" ] ->
  {
    fun ~pstate ->
      let proof_t = Declare.Proof.get pstate in
      let goal_str = Pp.string_of_ppcmds (Printer.pr_open_subgoals proof_t) in
      let goal_len = String.length goal_str in
      let strsearch = String.sub goal_str 6 (goal_len - 6) in
      let strlist = Str.split (Str.regexp "============================") strsearch in
      (* let goal = List.nth strlist 1 in *)
      let hypotheses_list = List.nth strlist 0 in
      Feedback.msg_notice (str hypotheses_list)
  }
END

VERNAC COMMAND EXTEND ShowGoals CLASSIFIED AS QUERY
| ![proof_query] ["ShowGoals"] ->
  {
    fun ~pstate -> 
      let proverbot_dir = "/home/arpan/Downloads/proverbot9001-plugin/" in
      let proof_t = Declare.Proof.get pstate in
      let Proof.{goals; stack; sigma; entry; _} = Proof.data proof_t in
      begin match goals with
      | [] -> Feedback.msg_notice (str "No open goals.")
      | _ -> 
        let bgoals = Proof.background_subgoals proof_t in
        let bgoals_focused, bgoals_unfocused = List.partition (fun x -> List.mem x goals) bgoals in
        let env, concl = Evd.evar_filtered_env (Global.env ()) (Evd.find sigma (List.hd bgoals_focused)), Evd.evar_concl (Evd.find sigma (List.hd bgoals_focused))
        in 
        let hyp_list = Pp.string_of_ppcmds (Printer.pr_context_of env sigma) in
        let goal = Pp.string_of_ppcmds (Printer.pr_letype_env ~goal_concl_style:true env sigma concl) in
        let split_hyp_list = Str.split (Str.regexp "\n") hyp_list in
        let hyp_string = List.fold_left (fun a b -> a ^ "\"" ^ b ^ "\"" ^ " ") "" split_hyp_list in
        let cmd_to_run = "python " ^ proverbot_dir ^ "src/plugin_predictor.py data/polyarg-weights.dat" ^ " --rel_lemmas \" \"" ^ " --prev_tactics \" \"" ^ " --hypotheses " ^ hyp_string ^ " --goal " ^ "\"" ^ goal ^ "\"" in
        Feedback.msg_notice (str cmd_to_run)  
      end
  }
END

TACTIC EXTEND my_intro
| [ "my_intro" ident(i) ] ->
  { Tactics.introduction i }
END

VERNAC COMMAND EXTEND ExploreProof CLASSIFIED AS QUERY
| ![ proof_query ] [ "ExploreProof" ] ->
  { fun ~pstate ->
    let sigma, env = Declare.Proof.get_current_context pstate in
    let pprf = Proof.partial_proof (Declare.Proof.get pstate) in
    Feedback.msg_notice
      (Pp.prlist_with_sep Pp.fnl (Printer.pr_econstr_env env sigma) pprf)
  }
END

VERNAC COMMAND EXTEND NameProof CLASSIFIED AS QUERY
| ![proof_query] [ "NameProof" ] ->
  { fun ~pstate ->
    Feedback.msg_notice (str (Names.Id.to_string (Declare.Proof.get_name pstate)))}
END


VERNAC COMMAND EXTEND FileName CLASSIFIED AS QUERY
| [ "FileName" ] ->
{
  let cur_mp = Names.ModPath.to_string (Lib.current_mp ()) in
  Feedback.msg_notice (str cur_mp)
}
END


VERNAC COMMAND EXTEND AllArgs CLASSIFIED AS QUERY
| [ "AllArgs" ] ->
{
  let argarray = Sys.argv in
  Feedback.msg_notice (Pp.prvect_with_sep Pp.fnl str argarray)
}
END


VERNAC COMMAND EXTEND TryThis CLASSIFIED AS QUERY
| ![proof_query] [ "TryThis" ] ->
  {
    fun ~pstate ->
      let proof_data = Proof.data (Declare.Proof.get pstate) in
      Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl Evar.print proof_data.goals)
  }
END

VERNAC COMMAND EXTEND RunProverbot CLASSIFIED AS QUERY
| ![proof_query] [ "RunProverbot" ] ->
  {
    fun ~pstate ->
      let proof_name = Names.Id.to_string (Declare.Proof.get_name pstate) in
        let proverbot_dir = "/home/arpan/Downloads/holder/proverbot9001/" in
        let cmd_length = Array.length (Sys.argv) in
        let filename = Unix.realpath (Sys.argv.(cmd_length - 1)) in
        let ic = Arg.read_arg filename in
        let ic_mod = Array.of_list (List.tl (Array.to_list ic)) in
        let _ = Arg.write_arg "trial.v" ic_mod in
        let cmd_to_run = proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat " ^ "~/Downloads/coq-synthesis/_build/default/trial.v" ^ " --proof=" ^ proof_name ^ " --no-generate-report 2>/dev/null" in
        let ret_code = Unix.system (cmd_to_run) in
        match ret_code with
        | WEXITED _ -> 
                       let _ = Feedback.msg_notice (str "Proverbot ran successfully!") in
                       let strsearch = Str.regexp "status" in
                       let ic' = Core.In_channel.read_all "/home/arpan/Downloads/coq-synthesis/_build/default/search-report/trial-proofs.txt" in
                       let filelen = String.length ic' in
                       let index = (Str.search_forward strsearch ic' 0) - 2 in
                       let relstring = String.sub ic' index (filelen - index - 2) in
                       let json = Yojson.Safe.from_string relstring in
                       let open Yojson.Safe.Util in
                       let commands = json |> member "commands" |> to_list in
                       let tactics = List.map(fun command -> member "tactic" command |> to_string) commands in
                       let _ = Feedback.msg_notice (str "Here's the synthesized proof: ") in
                       let _ = Feedback.msg_notice (Pp.fnl ()) in
                       Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl str tactics)
        | _ -> Feedback.msg_notice (str "Something went wrong trying to run Proverbot!")
  }
END

VERNAC COMMAND EXTEND Decompile CLASSIFIED AS QUERY
| [ "Decompile" constr(e) ] ->
  {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (sigma, t) = Constrintern.interp_constr_evars env sigma e in
    let (sigma, typ) = Typing.type_of env sigma t in
    let str_pp = Pp.string_of_ppcmds (Printer.pr_econstr_env env sigma typ) in
    let _ = Arg.write_arg "decompile.v" (Array.of_list ["Theorem decompilation: " ^ str_pp ^ "."; "Proof."; "Admitted."]) in
    let proverbot_dir = "/home/arpan/Downloads/holder/proverbot9001/" in
    let cmd_to_run = proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat " ^ "~/Downloads/coq-synthesis/_build/default/decompile.v" ^ " --no-generate-report 2>/dev/null" in
    let _ = Unix.system (cmd_to_run) in
    let strsearch = Str.regexp "status" in
    let ic' = Core.In_channel.read_all "/home/arpan/Downloads/coq-synthesis/_build/default/search-report/decompile-proofs.txt" in
    let filelen = String.length ic' in
    let index = (Str.search_forward strsearch ic' 0) - 2 in
    let relstring = String.sub ic' index (filelen - index - 2) in
    let json = Yojson.Safe.from_string relstring in
    let open Yojson.Safe.Util in
    let commands = json |> member "commands" |> to_list in
    let tactics = List.map(fun command -> member "tactic" command |> to_string) commands in
    let _ = Feedback.msg_notice (str "Here's the decompiled proof: ") in
    let _ = Feedback.msg_notice (Pp.fnl ()) in
    Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl str tactics)
  }
END

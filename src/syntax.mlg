DECLARE PLUGIN "synthesis-coq-plugin.plugin"

{

open Pp
open Ltac_plugin
open Stdarg

}


TACTIC EXTEND my_intro
| [ "my_intro" ident(i) ] ->
  { Tactics.introduction i }
END

VERNAC COMMAND EXTEND ExploreProof CLASSIFIED AS QUERY
| ![ proof_query ] [ "ExploreProof" ] ->
  { fun ~pstate ->
    let sigma, env = Declare.Proof.get_current_context pstate in
    let pprf = Proof.partial_proof (Declare.Proof.get pstate) in
    Feedback.msg_notice
      (Pp.prlist_with_sep Pp.fnl (Printer.pr_econstr_env env sigma) pprf)
  }
END

VERNAC COMMAND EXTEND NameProof CLASSIFIED AS QUERY
| ![proof_query] [ "NameProof" ] ->
  { fun ~pstate ->
    Feedback.msg_notice (str (Names.Id.to_string (Declare.Proof.get_name pstate)))}
END


VERNAC COMMAND EXTEND TryThis CLASSIFIED AS QUERY
| ![proof_query] [ "TryThis" ] ->
  {
    fun ~pstate ->
      let proof_data = Proof.data (Declare.Proof.get pstate) in
      Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl Evar.print proof_data.goals)
  }
END

VERNAC COMMAND EXTEND TryThis CLASSIFIED AS QUERY
| ![proof_query] [ "PrintGoals" ] ->
  {
    fun ~pstate ->
      let proof_t = Declare.Proof.get pstate in
      let goals = Evar.Set.elements (Proof.all_goals proof_t) in
      Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl Evar.print goals)
  }
END
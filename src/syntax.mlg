DECLARE PLUGIN "synthesis-coq-plugin.plugin"

{

open Ltac_plugin
open Pp
open Stdarg



let proverbot_dir_global = ref "~/Downloads/proverbot9001-plugin/"

let _ = Goptions.declare_string_option {
  optdepr=false;
  (* optname="Proverbot Path"; *)
  optkey=["Proverbot";"Path"];
  optread=(fun () -> !proverbot_dir_global);
  optwrite=(fun s -> proverbot_dir_global := s)
}

let current_file_path = ref "/home/arpan/Downloads/coq-synthesis/theories/Test.v"

let _ = Goptions.declare_string_option {
  optdepr=false;
  (* optname="Current File Path"; *)
  optkey=["Current";"File";"Path"];
  optread=(fun () -> !current_file_path);
  optwrite=(fun s -> current_file_path := s)
}

}

TACTIC EXTEND my_intro
| [ "my_intro" ident(i) ] ->
  { Tactics.introduction i }
END

VERNAC COMMAND EXTEND PredictTactic CLASSIFIED AS QUERY
| ![proof_query] ["PredictTactic"] ->
  {
    fun ~pstate -> 
      let proverbot_dir = !proverbot_dir_global in
      let proof_t = Declare.Proof.get pstate in
      let Proof.{goals; stack; sigma; entry; _} = Proof.data proof_t in
      begin match goals with
      | [] -> Feedback.msg_notice (str "No open goals.")
      | _ -> 
        let bgoals = Proof.background_subgoals proof_t in
        let bgoals_focused, bgoals_unfocused = List.partition (fun x -> List.mem x goals) bgoals in
        let env, concl = Evd.evar_filtered_env (Global.env ()) (Evd.find sigma (List.hd bgoals_focused)), Evd.evar_concl (Evd.find sigma (List.hd bgoals_focused))
        in 
        let hyp_list = Pp.string_of_ppcmds (Printer.pr_context_of env sigma) in
        let goal = Pp.string_of_ppcmds (Printer.pr_letype_env ~goal_concl_style:true env sigma concl) in
        let split_hyp_list = Str.split (Str.regexp "\n") hyp_list in
        let hyp_string = List.fold_left (fun a b -> a ^ "\"" ^ b ^ "\"" ^ " ") "" split_hyp_list in
        let cmd_to_run = "python " ^ proverbot_dir ^ "src/plugin_predictor.py " ^ proverbot_dir ^ "data/polyarg-weights.dat" ^ " --rel_lemmas \" \"" ^ " --prev_tactics \"Proof.\"" ^ " --hypotheses " ^ hyp_string ^ " --goal " ^ "\"" ^ goal ^ "\"" in
        let ret_code = Unix.system (cmd_to_run) in
        match ret_code with
        | WEXITED _ -> Feedback.msg_notice (Pp.fnl ())
        | _ -> Feedback.msg_notice (str "Something went wrong!")
      end
  }
END

VERNAC COMMAND EXTEND RunProverbot CLASSIFIED AS QUERY
| ![proof_query] [ "RunProverbot" ] ->
  {
    fun ~pstate ->
      let proof_name = Names.Id.to_string (Declare.Proof.get_name pstate) in
        let proverbot_dir = !proverbot_dir_global in
        let filename = !current_file_path in
        let ic = Arg.read_arg filename in
        let ic_mod = Array.of_list (List.tl (Array.to_list ic)) in
        let _ = Arg.write_arg "trial.v" ic_mod in
        let theorem_lemma = Array.sub ic_mod 0 (Array.length ic_mod - 3) in
        let cmd_to_run = proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat " ^ "trial.v" ^ " --proof=" ^ proof_name ^ " --no-generate-report" in
        let ret_code = Unix.system (cmd_to_run) in
        match ret_code with
        | WEXITED _ -> 
                       let _ = Feedback.msg_notice (str "Proverbot ran successfully!") in
                       let strsearch = Str.regexp "status" in
                       let ic' = Core.In_channel.read_all "search-report/trial-proofs.txt" in
                       let filelen = String.length ic' in
                       let index = (Str.search_forward strsearch ic' 0) - 2 in
                       let relstring = String.sub ic' index (filelen - index - 2) in
                       let json = Yojson.Safe.from_string relstring in
                       let open Yojson.Safe.Util in
                       let commands = json |> member "commands" |> to_list in
                       let tactics = List.map(fun command -> member "tactic" command |> to_string) commands in
                       (* let _ = Unix.system ("rm -r trial.v search-report/*") in *)
                       let _ = Feedback.msg_notice (str "Here's the synthesized proof: ") in
                       let _ = Feedback.msg_notice (Pp.fnl ()) in
                       let _ = Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl str tactics) in
                       let _ = Arg.write_arg "proved_theorem.v" (Array.append theorem_lemma (Array.of_list tactics)) in
                       let _ = Unix.system ("alectryon --frontend coq --backend webpage proved_theorem.v -o proved_theorem.html") in
                       let _ = Unix.system ("python " ^ proverbot_dir ^ "src/create_webpage.py") in
                       Feedback.msg_notice (Pp.fnl ())
                       
        | _ -> Feedback.msg_notice (str "Something went wrong trying to run Proverbot!")
  }
END

VERNAC COMMAND EXTEND RunProverbot2 CLASSIFIED AS QUERY
| ![proof_query] [ "RunProverbot2" ] ->
  {
    fun ~pstate ->
      let proof_name = Names.Id.to_string (Declare.Proof.get_name pstate) in
        let proverbot_dir = !proverbot_dir_global in
        let filename = !current_file_path in
        let ic = Core.In_channel.input_lines (Core.In_channel.create filename) in
        let ic_mod = List.filter (fun (x) -> not (Core.String.equal (Core.String.strip x) "RunProverbot2.")) (List.map Core.String.strip ic) in
        let ic_mod_length = Core.List.length ic_mod in
        let _ = Core.Out_channel.write_lines "trial.v" (List.tl ic_mod) in
        let (name_index, _) = Option.get (Core.List.findi ic_mod ~f:(fun i x -> Utils.contains x proof_name)) in 
        let theorem_lemma = Core.List.slice ic_mod 1 (name_index + 1) in
        let proof_prefix_list = Core.List.slice ic_mod (name_index + 2) (ic_mod_length - 1) in
        let proof_prefix = String.concat " " proof_prefix_list in
        let cmd_to_run = if (Core.String.equal "" proof_prefix) then proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat " ^ "trial.v" ^ " --proof=" ^ proof_name ^ " --no-generate-report" else proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat" ^ " --search-prefix " ^ "\"" ^ proof_prefix ^ "\"" ^ " trial.v" ^ " --proof=" ^ proof_name ^ " --no-generate-report" in
        let ret_code = Unix.system (cmd_to_run) in
        match ret_code with
        | WEXITED _ -> 
                       let strsearch = Str.regexp "status" in
                       let ic' = Core.In_channel.read_all "search-report/trial-proofs.txt" in
                       let filelen = String.length ic' in
                       let index = (Str.search_forward strsearch ic' 0) - 2 in
                       let relstring = String.sub ic' index (filelen - index - 2) in
                       let json = Yojson.Safe.from_string relstring in
                       let open Yojson.Safe.Util in
                       let commands = json |> member "commands" |> to_list in
                       let tactics = List.map(fun command -> member "tactic" command |> to_string) commands in
                       let _ = Unix.system ("rm -r trial.v search-report/*") in
                       let _ = 
                        if (Core.List.length tactics == 2) then
                           Feedback.msg_notice (str "Proverbot ran without errors but did not successfully generate a proof.") 
                        else 
                          ( 
                          let _ = Feedback.msg_notice (str "Proverbot ran successfully!") in
                          let _ = Feedback.msg_notice (str "Here's the synthesized proof: ") in
                          let _ = Feedback.msg_notice (Pp.fnl ()) in
                          Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl str tactics)) in
                       let _ = Core.Out_channel.write_lines "proved_theorem.v" (Core.List.append theorem_lemma tactics) in
                       let _ = Unix.system ("alectryon --frontend coq --backend webpage proved_theorem.v -o proved_theorem.html") in
                       let _ = Unix.system ("python " ^ proverbot_dir ^ "src/create_webpage.py") in
                       Feedback.msg_notice (Pp.fnl ())
                       
        | _ -> Feedback.msg_notice (str "Something went wrong trying to run Proverbot!")
  }
END

VERNAC COMMAND EXTEND Decompile CLASSIFIED AS QUERY
| [ "Decompile" constr(e) ] ->
  {
    let env = Global.env () in
    let sigma = Evd.from_env env in
    let (sigma, t) = Constrintern.interp_constr_evars env sigma e in
    let (sigma, typ) = Typing.type_of env sigma t in
    let str_pp = Pp.string_of_ppcmds (Printer.pr_econstr_env env sigma typ) in
    let _ = Arg.write_arg "decompile.v" (Array.of_list ["Theorem decompilation: " ^ str_pp ^ "."; "Proof."; "Admitted."]) in
    let proverbot_dir = !proverbot_dir_global in
    let cmd_to_run = proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat " ^ "~/Downloads/coq-synthesis/_build/default/decompile.v" ^ " --no-generate-report 2>/dev/null" in
    let _ = Unix.system (cmd_to_run) in
    let strsearch = Str.regexp "status" in
    let ic' = Core.In_channel.read_all "/home/arpan/Downloads/coq-synthesis/_build/default/search-report/decompile-proofs.txt" in
    let filelen = String.length ic' in
    let index = (Str.search_forward strsearch ic' 0) - 2 in
    let relstring = String.sub ic' index (filelen - index - 2) in
    let json = Yojson.Safe.from_string relstring in
    let open Yojson.Safe.Util in
    let commands = json |> member "commands" |> to_list in
    let tactics = List.map(fun command -> member "tactic" command |> to_string) commands in
    let _ = Feedback.msg_notice (str "Here's the decompiled proof: ") in
    let _ = Feedback.msg_notice (Pp.fnl ()) in
    Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl str tactics)
  }
END

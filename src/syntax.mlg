DECLARE PLUGIN "synthesis-coq-plugin.plugin"

{

(* open Array *)
open Ltac_plugin
open Pp
open Stdarg
(* open Sys *)
(* open Unix *)

}


TACTIC EXTEND my_intro
| [ "my_intro" ident(i) ] ->
  { Tactics.introduction i }
END

VERNAC COMMAND EXTEND ExploreProof CLASSIFIED AS QUERY
| ![ proof_query ] [ "ExploreProof" ] ->
  { fun ~pstate ->
    let sigma, env = Declare.Proof.get_current_context pstate in
    let pprf = Proof.partial_proof (Declare.Proof.get pstate) in
    Feedback.msg_notice
      (Pp.prlist_with_sep Pp.fnl (Printer.pr_econstr_env env sigma) pprf)
  }
END

VERNAC COMMAND EXTEND NameProof CLASSIFIED AS QUERY
| ![proof_query] [ "NameProof" ] ->
  { fun ~pstate ->
    Feedback.msg_notice (str (Names.Id.to_string (Declare.Proof.get_name pstate)))}
END


VERNAC COMMAND EXTEND TryThis CLASSIFIED AS QUERY
| ![proof_query] [ "TryThis" ] ->
  {
    fun ~pstate ->
      let proof_data = Proof.data (Declare.Proof.get pstate) in
      Feedback.msg_notice (Pp.prlist_with_sep Pp.fnl Evar.print proof_data.goals)
  }
END

VERNAC COMMAND EXTEND PrintGoals CLASSIFIED AS QUERY
| ![proof_query] [ "PrintGoals" ] ->
  {
    fun ~pstate ->
        let proverbot_dir = "/home/arpan/Downloads/proverbot9001/" in
        let cmd_length = Array.length (Sys.argv) in
        let filename = Unix.realpath (Sys.argv.(cmd_length - 1)) in
        let cmd_to_run = proverbot_dir ^ "src/search_file.py --weightsfile " ^ proverbot_dir ^ "data/polyarg-weights.dat " ^ filename ^ " --no-generate-report" in
        let _ = Unix.system (cmd_to_run) in
        Feedback.msg_notice (str ("Ran the following command:     " ^ cmd_to_run)) 
  }
END